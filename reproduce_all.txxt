
//version that keep half of previous generation
void Population::reproduce(double resistence){	
    // generate pop_size/2 new 
    std::vector<std::vector<int>> newborn = std::vector<std::vector<int>>(pop_size/2);
    for(int i=0; i<pop_size/2; i++)
	newborn[i] = crossover(pick_candidate(affinities), pick_candidate(affinities), resistence);

    //find median affinities to filter previous path
    std::vector<double> affinities_sorted = affinities;
    std::sort(affinities_sorted.begin(), affinities_sorted.end());
    double median = affinities_sorted[pop_size/2];

    //add in newborn path of previous generation with affinity higher median untill we have pop_size paths
    for(int i=0; i<pop_size && (int)newborn.size()<pop_size; i++)
	if(affinities[i] >= median)
	    newborn.push_back(population[i]);

    population = newborn;
}
